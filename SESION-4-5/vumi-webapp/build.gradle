buildscript {
	ext.repos = {
		mavenCentral()
		mavenLocal()
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'https://repository.axelor.com/nexus/public/' }
	}
	repositories repos
	dependencies {
		classpath "com.axelor:axelor-gradle:5.0.+"
		classpath "com.diffplug.spotless:spotless-plugin-gradle:3.12.0"
	}
}

allprojects { repositories repos }

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: "com.axelor.app"
apply plugin: "com.diffplug.gradle.spotless"

apply from: "modules/abs/version.gradle"

spotless { 
	java {  
		googleJavaFormat()
	} 
}

allprojects {

	configurations {
   		runtime.exclude group:"org.eclipse.birt.runtime.3_7_1", module:"org.apache.commons.codec"
	}
	
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: "com.diffplug.gradle.spotless"

	group = "com.axelor"
	version = absVersion

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	afterEvaluate { generateCode.finalizedBy( tasks.getByName('spotlessApply') ) }
	
}

axelor {
	title "Axelor ERP"
	description "Axelor Entreprise Application"
}

def modules = []
file("modules").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 1) { it ->
	if(new File(it, "build.gradle").exists()) {
		modules.add(it)
	}
}

dependencies {
	modules.each { dir ->
		compile project(":modules:$dir.name")
	}
}

task wrapper(type: Wrapper) { gradleVersion = "4.4.1" }

task("dataImport", type: JavaExec) {
	main = "com.axelor.apps.erp.Main"
	classpath = sourceSets.main.runtimeClasspath
	if(System.getProperty("exec.args") != null) {
		args System.getProperty("exec.args").split()
	}
}

task archiveReports(type: Zip){
	from 'modules/abs'
	include '*/src/main/resources/reports/*'
	classifier 'reports'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/reports/", '')
	}
	includeEmptyDirs = false
	destinationDir = new File("$buildDir/libs")
}

task archiveImages(type: Zip){
	from 'modules/abs'
	include '*/src/main/resources/data-demo/img/**'
	include '*/src/main/resources/data-init/img/**'
	classifier 'img'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/data-demo/img/", '').replaceAll(".*/src/main/resources/data-init/img/", "")
	}
	destinationDir = new File("$buildDir/libs")
	includeEmptyDirs = false
}

build.finalizedBy archiveReports, archiveImages
